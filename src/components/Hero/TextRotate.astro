---
interface Props {
	period: string
	text: string[]
	color: string
}
const { text, color } = Astro.props
---

<span
	class={`txt-rotate font-extrabold text-[${color}] transition-all duration-300 ease-in-out `}
	id="typewriter"
	data-rotate={JSON.stringify([...text])}></span>
<span class="slash">|</span>

<div class="flex h-full w-full items-center justify-center">
	<h1 id="typewriter" class="text-4xl font-bold"></h1>
</div>

<style>
	.slash {
		animation-name: animateslash;
		animation-duration: 0.8s;
		animation-iteration-count: infinite;
		animation-play-state: running;
	}
	@keyframes animateslash {
		0% {
			opacity: 1;
			z-index: 2;
		}
		100% {
			opacity: 0;
			z-index: 0;
		}
	}
	@-webkit-keyframes animateslash {
		0% {
			opacity: 1;
			z-index: 2;
		}
		100% {
			opacity: 0;
			z-index: 0;
		}
	}
</style>

<script>
	const rotate: string | null =
		document.getElementById('typewriter')?.getAttribute('data-rotate') ?? null
	const words = [...JSON.parse(rotate ?? '[]')]
	let i = 0
	let j = 0
	let currentWord = ''
	let fullText = '' // Almacena el texto completo para ir agregando palabra por palabra

	function type() {
		// Si ya hemos terminado de escribir todas las palabras, no repetimos
		if (i >= words.length) {
			return
		}

		currentWord = words[i]

		// Agrega la palabra actual
		const typewriterElement = document.getElementById('typewriter')
		if (typewriterElement) {
			typewriterElement.textContent = fullText + currentWord.substring(0, j + 1)
		}
		j++

		// Si la palabra actual se ha escrito completamente
		if (j == currentWord.length) {
			fullText += currentWord + ' ' // Agrega la palabra completa al texto final
			i++ // Pasamos a la siguiente palabra
			j = 0 // Reiniciamos el contador de caracteres para la pr√≥xima palabra
		}

		// Continuar escribiendo mientras haya palabras
		if (i < words.length) {
			setTimeout(type, 200)
		}
	}
	type()
</script>
